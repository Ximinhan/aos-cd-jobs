node {
    checkout scm
    commonlib = load('pipeline-scripts/commonlib.groovy')
    commonlib.describeJob("operator-sdk_sync", """
        <h2>Sync operator-sdk to mirror</h2>
        <b>Timing</b>: Manually, upon request. Expected to happen once every y-stream and
        sporadically on z-stream releases.
    """)
}

pipeline {
    agent any

    options {
        disableResume()
        skipDefaultCheckout()
    }

    parameters {
        commonlib.ocpVersionParam('VERSION', '4'),
        string(
            name: 'ASSEMBLY',
            description: 'Under which ASSEMBLY directory to place the binaries.',
            defaultValue: "stream",
            trim: true,
        ),
        booleanParam(
            name: 'UPDATE_LATEST_SYMLINK',
            description: 'You just want to update "latest" on the highest 4.x version',
            defaultValue: true,
        )
    }

    stages {
        stage('operator-sdk-sync') {
            sh "rm -rf ./artcd_working && mkdir -p ./artcd_working"
            def cmd = [
                "artcd",
                "-v",
                "--working-dir=./artcd_working",
                "--config=./config/artcd.toml",
                "operator-sdk-sync",
                "--group=openshift-${params.VERSION}",
                "--assembly=${params.ASSEMBLY}",
                "--updatelatest=${params.UPDATE_LATEST_SYMLINK}"
            ]

            def env = ["KUBECONFIG=${buildlib.ciKubeconfig}"]
            withEnv(env) {
                withCredentials([aws(credentialsId: 's3-art-srv-enterprise', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'),
                                 string(credentialsId: 'openshift-bot-token', variable: 'GITHUB_TOKEN'),
                                 string(credentialsId: 'jboss-jira-token', variable: 'JIRA_TOKEN')]) {
                    def out = sh(script: cmd.join(' '), returnStdout: true).trim()
                    echo out

                    if (out.contains('failed with')) {
                        currentBuild.result = "FAILURE"
                    }
                }
            }
        }
    }
}
