name: Submodule Sync
on:
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch: ~

jobs:
  submodule-sync:
    name: Submodule Sync
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    - name: submodule art-tools sync
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          branch_name: automated-submodule-update
          module_name: art-tools
          module_branch: main
      run: |
          API_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
          URI="https://api.github.com"
          user_response=$(curl -s -H "${AUTH_HEADER}" -H "${API_HEADER}" "${URI}/users/${GITHUB_REPOSITORY_OWNER}")
          USER_LOGIN=$(echo "$user_response" | jq -r ".login")
          USER_EMAIL=$(echo "$user_response" | jq -r ".email")
          echo "user_login: $USER_LOGIN, user_email:$USER_EMAIL"
          
          # Fetch the latest sha for the art-tools branch from that repo
          mod=$(curl -s -H "${AUTH_HEADER}" -H "${API_HEADER}" \
          "${URI}/repos/${GITHUB_REPOSITORY}/contents/${module_name}")
          sub_repo=$(echo "$mod" | jq -r .submodule_git_url)
          sub_sha=$(echo "$mod" | jq -r .sha)
          echo "$mod"

          mod_remote=$(curl -s -H "${AUTH_HEADER}" -H "${API_HEADER}" \
          "${URI}/repos/openshift-eng/${module_name}/git/ref/heads/${module_branch}")
          echo "$mod_remote"
          sha_remote=$(echo "$mod_remote" | jq -r .object.sha)
          # Is the new ref the same as the current one?
          if [[ "$sha_remote" == "sub_sha" ]]; then
              echo "This submodule is already up to date"
              exit 0
          fi
          echo "current repo's submodule is outdated"
          # Is it the same as the ref on the PR branch?
          mod_pr=$(curl -s -H "${AUTH_HEADER}" -H "${API_HEADER}" \
          "${URI}/repos/${GITHUB_REPOSITORY}/contents/${module_name}?ref=${branch_name}")
          sha_branch=$(echo "$mod_pr" | jq -r .sha)
          echo $sha_branch
          if [[ "$sha_branch" != "null" ]]; then
              if [[ "$sha_remote" == "sha_branch" ]]; then
                  echo "This submodule is already updated on the PR branch"
                  exit 0
              fi
          else
              # Create a PR with this commit hash if it doesn't exist
              git config --global --add safe.directory /github/workspace
              
              git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
              git config --global user.email "$USER_EMAIL"
              git config --global user.name "$USER_LOGIN"
              
              git checkout -b $branch_name
              git submodule update --init --recursive --remote -- art-tools
              git commit -am "Update [${module_name}] submodule to [openshift-eng/$module_name@$module_branch]"
              git push --set-upstream origin $branch_name
              curl -s -X POST -H "${AUTH_HEADER}" -H "${API_HEADER}" \
                  "${URI}/repos/$GITHUB_REPOSITORY/pulls" \
                  -d '{"title":"Automated submodule update (${module_name})","body":"Update [${module_name}] submodule to [openshift-eng/$module_name@$module_branch]","head":"$USER_LOGIN:$branch_name","base":"master"}'
          fi
          
          



          
