properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')),
    disableConcurrentBuilds(),
    disableResume(),
])

description = ""
failed = false

def runFor(version, date) {
    b = build(
            job: '../scanning/scanning%2Fimages-health',
            parameters: [
                string(name: 'BUILD_VERSION', value: version),
                string(name: 'ALERT_DATE', value: date)
            ],
            propagate: false,
        )
    description += "${version} - ${b.result}\n"
    failed |= (b.result != "SUCCESS")
}

@NonCPS
def sortedVersions() {
  return commonlib.ocpVersions.sort(false)
}

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib

    for ( String version : sortedVersions() ) {
        if ( version == "3.11" ) {
            // skip 3.11 upstream pr check
            runFor(version)
        } else {
            runFor(version, 'Monday')
        }
        // allow current github API rate limit window resets
        sleep time: 60, unit: 'MINUTES'
    }
    buildlib.cleanWorkspace()
}

currentBuild.description = description.trim()
currentBuild.result = failed ? "FAILURE" : "SUCCESS"
