name: Submodule Update
on:
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch: ~

jobs:
  submodule-update:
    name: Submodule Update
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    - name: submodule art-tools sync
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: automated-submodule-update
          MOD_NAME: art-tools
          MOD_ORG: openshift-eng
          MOD_BRANCH: main
      run: |
          API_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
          URI="https://api.github.com"
          user_response=$(curl -s -H "${AUTH_HEADER}" -H "$API_HEADER" "$URI/users/$GITHUB_REPOSITORY_OWNER")
          
          # Fetch the latest sha for the art-tools branch from that repo
          mod=$(curl -s -H "$AUTH_HEADER" -H "${API_HEADER}" "$URI/repos/$GITHUB_REPOSITORY/contents/$MOD_NAME")

          mod_remote=$(curl -s -H "$AUTH_HEADER" -H "$API_HEADER" "$URI/repos/$MOD_ORG/$MOD_NAME/git/ref/heads/$MOD_BRANCH")
          sha_remote=$(echo "$mod_remote" | jq -r .object.sha)
          
          # Is the new ref the same as the current one?
          if [[ "$sha_remote" == '$(echo "$mod" | jq -r .sha)' ]]; then
              echo "This submodule is already up to date"
              exit 0
          fi
          echo "master repo's submodule is outdated"
          
          # Is it the same as the ref on the PR branch?
          mod_pr=$(curl -s -H "$AUTH_HEADER" -H "$API_HEADER" "$URI/repos/$GITHUB_REPOSITORY/contents/$MOD_NAME?ref=$BRANCH")
          sha_branch=$(echo "$mod_pr" | jq -r .sha)
          if [[ "$sha_branch" != "null" ]]; then
              if [[ "$sha_remote" == "$sha_branch" ]]; then
                  echo "This submodule is already updated on the PR branch"
                  exit 0
              else
                  echo "This submodule is outdate on the pr branch"
                  git push origin --delete $BRANCH
              fi
          fi
          
          # Create a PR with this commit hash if it doesn't exist
          echo "Create new pr to update submodule"
          git config --global --add safe.directory /github/workspace
          
          git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
          git config --global user.email '$(echo "$user_response" | jq -r ".email")'
          git config --global user.name '$(echo "$user_response" | jq -r ".login")'

          git checkout -b $BRANCH
          git submodule update --init --recursive --remote -- $MOD_NAME
          git commit -am "Update [$MOD_NAME] submodule to [$MOD_ORG/$MOD_NAME@$MOD_BRANCH]"
          git push --set-upstream origin $BRANCH
          gh pr create --title "Automated submodule update [$MOD_NAME]" --body "Update [$MOD_NAME] submodule to [$MOD_ORG/$MOD_NAME@$MOD_BRANCH]"
      
          
          



          
